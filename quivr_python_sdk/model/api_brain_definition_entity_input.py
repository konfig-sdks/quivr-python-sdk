# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class ApiBrainDefinitionEntityInput(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "method",
            "search_params",
            "params",
            "secrets",
            "brain_id",
            "url",
        }
        
        class properties:
            brain_id = schemas.UUIDSchema
        
            @staticmethod
            def method() -> typing.Type['ApiBrainAllowedMethods']:
                return ApiBrainAllowedMethods
            url = schemas.StrSchema
        
            @staticmethod
            def params() -> typing.Type['ApiBrainDefinitionSchema']:
                return ApiBrainDefinitionSchema
        
            @staticmethod
            def search_params() -> typing.Type['ApiBrainDefinitionSchema']:
                return ApiBrainDefinitionSchema
            
            
            class secrets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiBrainDefinitionSecret']:
                        return ApiBrainDefinitionSecret
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ApiBrainDefinitionSecret'], typing.List['ApiBrainDefinitionSecret']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secrets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiBrainDefinitionSecret':
                    return super().__getitem__(i)
            raw = schemas.BoolSchema
            
            
            class jq_instructions(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jq_instructions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "brain_id": brain_id,
                "method": method,
                "url": url,
                "params": params,
                "search_params": search_params,
                "secrets": secrets,
                "raw": raw,
                "jq_instructions": jq_instructions,
            }
    
    method: 'ApiBrainAllowedMethods'
    search_params: 'ApiBrainDefinitionSchema'
    params: 'ApiBrainDefinitionSchema'
    secrets: MetaOapg.properties.secrets
    brain_id: MetaOapg.properties.brain_id
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_id"]) -> MetaOapg.properties.brain_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> 'ApiBrainAllowedMethods': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["params"]) -> 'ApiBrainDefinitionSchema': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search_params"]) -> 'ApiBrainDefinitionSchema': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secrets"]) -> MetaOapg.properties.secrets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw"]) -> MetaOapg.properties.raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jq_instructions"]) -> MetaOapg.properties.jq_instructions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["brain_id", "method", "url", "params", "search_params", "secrets", "raw", "jq_instructions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_id"]) -> MetaOapg.properties.brain_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> 'ApiBrainAllowedMethods': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["params"]) -> 'ApiBrainDefinitionSchema': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search_params"]) -> 'ApiBrainDefinitionSchema': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secrets"]) -> MetaOapg.properties.secrets: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw"]) -> typing.Union[MetaOapg.properties.raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jq_instructions"]) -> typing.Union[MetaOapg.properties.jq_instructions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["brain_id", "method", "url", "params", "search_params", "secrets", "raw", "jq_instructions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        method: 'ApiBrainAllowedMethods',
        search_params: 'ApiBrainDefinitionSchema',
        params: 'ApiBrainDefinitionSchema',
        secrets: typing.Union[MetaOapg.properties.secrets, list, tuple, ],
        brain_id: typing.Union[MetaOapg.properties.brain_id, str, uuid.UUID, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        raw: typing.Union[MetaOapg.properties.raw, bool, schemas.Unset] = schemas.unset,
        jq_instructions: typing.Union[MetaOapg.properties.jq_instructions, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiBrainDefinitionEntityInput':
        return super().__new__(
            cls,
            *args,
            method=method,
            search_params=search_params,
            params=params,
            secrets=secrets,
            brain_id=brain_id,
            url=url,
            raw=raw,
            jq_instructions=jq_instructions,
            _configuration=_configuration,
            **kwargs,
        )

from quivr_python_sdk.model.api_brain_allowed_methods import ApiBrainAllowedMethods
from quivr_python_sdk.model.api_brain_definition_schema import ApiBrainDefinitionSchema
from quivr_python_sdk.model.api_brain_definition_secret import ApiBrainDefinitionSecret
