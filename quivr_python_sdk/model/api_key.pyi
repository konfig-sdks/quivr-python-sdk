# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class ApiKey(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "creation_time",
            "is_active",
            "api_key",
            "key_id",
            "name",
            "days",
            "only_chat",
        }
        
        class properties:
            api_key = schemas.StrSchema
            key_id = schemas.StrSchema
            days = schemas.IntSchema
            only_chat = schemas.BoolSchema
            name = schemas.StrSchema
            creation_time = schemas.StrSchema
            is_active = schemas.BoolSchema
            __annotations__ = {
                "api_key": api_key,
                "key_id": key_id,
                "days": days,
                "only_chat": only_chat,
                "name": name,
                "creation_time": creation_time,
                "is_active": is_active,
            }
    
    creation_time: MetaOapg.properties.creation_time
    is_active: MetaOapg.properties.is_active
    api_key: MetaOapg.properties.api_key
    key_id: MetaOapg.properties.key_id
    name: MetaOapg.properties.name
    days: MetaOapg.properties.days
    only_chat: MetaOapg.properties.only_chat
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_key"]) -> MetaOapg.properties.api_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_id"]) -> MetaOapg.properties.key_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days"]) -> MetaOapg.properties.days: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["only_chat"]) -> MetaOapg.properties.only_chat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["api_key", "key_id", "days", "only_chat", "name", "creation_time", "is_active", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_key"]) -> MetaOapg.properties.api_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_id"]) -> MetaOapg.properties.key_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days"]) -> MetaOapg.properties.days: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["only_chat"]) -> MetaOapg.properties.only_chat: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["api_key", "key_id", "days", "only_chat", "name", "creation_time", "is_active", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creation_time: typing.Union[MetaOapg.properties.creation_time, str, ],
        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
        api_key: typing.Union[MetaOapg.properties.api_key, str, ],
        key_id: typing.Union[MetaOapg.properties.key_id, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        days: typing.Union[MetaOapg.properties.days, decimal.Decimal, int, ],
        only_chat: typing.Union[MetaOapg.properties.only_chat, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiKey':
        return super().__new__(
            cls,
            *args,
            creation_time=creation_time,
            is_active=is_active,
            api_key=api_key,
            key_id=key_id,
            name=name,
            days=days,
            only_chat=only_chat,
            _configuration=_configuration,
            **kwargs,
        )
