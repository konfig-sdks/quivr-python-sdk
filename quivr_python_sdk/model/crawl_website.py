# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class CrawlWebsite(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "url",
        }
        
        class properties:
            url = schemas.StrSchema
            js = schemas.BoolSchema
            depth = schemas.IntSchema
            max_pages = schemas.IntSchema
            max_time = schemas.IntSchema
            __annotations__ = {
                "url": url,
                "js": js,
                "depth": depth,
                "max_pages": max_pages,
                "max_time": max_time,
            }
    
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["js"]) -> MetaOapg.properties.js: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depth"]) -> MetaOapg.properties.depth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_pages"]) -> MetaOapg.properties.max_pages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_time"]) -> MetaOapg.properties.max_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "js", "depth", "max_pages", "max_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["js"]) -> typing.Union[MetaOapg.properties.js, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depth"]) -> typing.Union[MetaOapg.properties.depth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_pages"]) -> typing.Union[MetaOapg.properties.max_pages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_time"]) -> typing.Union[MetaOapg.properties.max_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "js", "depth", "max_pages", "max_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        js: typing.Union[MetaOapg.properties.js, bool, schemas.Unset] = schemas.unset,
        depth: typing.Union[MetaOapg.properties.depth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_pages: typing.Union[MetaOapg.properties.max_pages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_time: typing.Union[MetaOapg.properties.max_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CrawlWebsite':
        return super().__new__(
            cls,
            *args,
            url=url,
            js=js,
            depth=depth,
            max_pages=max_pages,
            max_time=max_time,
            _configuration=_configuration,
            **kwargs,
        )
