# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class GetChatHistoryOutput(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "assistant",
            "user_message",
            "message_id",
            "chat_id",
        }
        
        class properties:
            chat_id = schemas.UUIDSchema
            
            
            class message_id(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.UUIDSchema
                    any_of_1 = schemas.StrSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'message_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            user_message = schemas.StrSchema
            assistant = schemas.StrSchema
            
            
            class message_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'message_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class prompt_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'prompt_title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class brain_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brain_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class brain_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brain_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class metadata(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class thumbs(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thumbs':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "chat_id": chat_id,
                "message_id": message_id,
                "user_message": user_message,
                "assistant": assistant,
                "message_time": message_time,
                "prompt_title": prompt_title,
                "brain_name": brain_name,
                "brain_id": brain_id,
                "metadata": metadata,
                "thumbs": thumbs,
            }
    
    assistant: MetaOapg.properties.assistant
    user_message: MetaOapg.properties.user_message
    message_id: MetaOapg.properties.message_id
    chat_id: MetaOapg.properties.chat_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chat_id"]) -> MetaOapg.properties.chat_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_id"]) -> MetaOapg.properties.message_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_message"]) -> MetaOapg.properties.user_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assistant"]) -> MetaOapg.properties.assistant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_time"]) -> MetaOapg.properties.message_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt_title"]) -> MetaOapg.properties.prompt_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_name"]) -> MetaOapg.properties.brain_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_id"]) -> MetaOapg.properties.brain_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbs"]) -> MetaOapg.properties.thumbs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chat_id", "message_id", "user_message", "assistant", "message_time", "prompt_title", "brain_name", "brain_id", "metadata", "thumbs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chat_id"]) -> MetaOapg.properties.chat_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_id"]) -> MetaOapg.properties.message_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_message"]) -> MetaOapg.properties.user_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assistant"]) -> MetaOapg.properties.assistant: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_time"]) -> typing.Union[MetaOapg.properties.message_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt_title"]) -> typing.Union[MetaOapg.properties.prompt_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_name"]) -> typing.Union[MetaOapg.properties.brain_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_id"]) -> typing.Union[MetaOapg.properties.brain_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbs"]) -> typing.Union[MetaOapg.properties.thumbs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chat_id", "message_id", "user_message", "assistant", "message_time", "prompt_title", "brain_name", "brain_id", "metadata", "thumbs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assistant: typing.Union[MetaOapg.properties.assistant, str, ],
        user_message: typing.Union[MetaOapg.properties.user_message, str, ],
        message_id: typing.Union[MetaOapg.properties.message_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        chat_id: typing.Union[MetaOapg.properties.chat_id, str, uuid.UUID, ],
        message_time: typing.Union[MetaOapg.properties.message_time, None, str, schemas.Unset] = schemas.unset,
        prompt_title: typing.Union[MetaOapg.properties.prompt_title, None, str, schemas.Unset] = schemas.unset,
        brain_name: typing.Union[MetaOapg.properties.brain_name, None, str, schemas.Unset] = schemas.unset,
        brain_id: typing.Union[MetaOapg.properties.brain_id, None, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        thumbs: typing.Union[MetaOapg.properties.thumbs, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetChatHistoryOutput':
        return super().__new__(
            cls,
            *args,
            assistant=assistant,
            user_message=user_message,
            message_id=message_id,
            chat_id=chat_id,
            message_time=message_time,
            prompt_title=prompt_title,
            brain_name=brain_name,
            brain_id=brain_id,
            metadata=metadata,
            thumbs=thumbs,
            _configuration=_configuration,
            **kwargs,
        )
