# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class IntegrationDescriptionEntity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "integration_name",
            "max_files",
            "allow_model_change",
            "description",
            "id",
            "integration_display_name",
            "integration_type",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.UUIDSchema
            integration_name = schemas.StrSchema
        
            @staticmethod
            def integration_type() -> typing.Type['IntegrationType']:
                return IntegrationType
            max_files = schemas.IntSchema
            allow_model_change = schemas.BoolSchema
            integration_display_name = schemas.StrSchema
            
            
            class tags(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IntegrationBrainTag']:
                        return IntegrationBrainTag
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class integration_logo_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'integration_logo_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class connection_settings(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'connection_settings':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class information(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'information':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "description": description,
                "id": id,
                "integration_name": integration_name,
                "integration_type": integration_type,
                "max_files": max_files,
                "allow_model_change": allow_model_change,
                "integration_display_name": integration_display_name,
                "tags": tags,
                "integration_logo_url": integration_logo_url,
                "connection_settings": connection_settings,
                "information": information,
            }
    
    integration_name: MetaOapg.properties.integration_name
    max_files: MetaOapg.properties.max_files
    allow_model_change: MetaOapg.properties.allow_model_change
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    integration_display_name: MetaOapg.properties.integration_display_name
    integration_type: 'IntegrationType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration_name"]) -> MetaOapg.properties.integration_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration_type"]) -> 'IntegrationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_files"]) -> MetaOapg.properties.max_files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_model_change"]) -> MetaOapg.properties.allow_model_change: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration_display_name"]) -> MetaOapg.properties.integration_display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integration_logo_url"]) -> MetaOapg.properties.integration_logo_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_settings"]) -> MetaOapg.properties.connection_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["information"]) -> MetaOapg.properties.information: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "integration_name", "integration_type", "max_files", "allow_model_change", "integration_display_name", "tags", "integration_logo_url", "connection_settings", "information", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration_name"]) -> MetaOapg.properties.integration_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration_type"]) -> 'IntegrationType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_files"]) -> MetaOapg.properties.max_files: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_model_change"]) -> MetaOapg.properties.allow_model_change: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration_display_name"]) -> MetaOapg.properties.integration_display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integration_logo_url"]) -> typing.Union[MetaOapg.properties.integration_logo_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_settings"]) -> typing.Union[MetaOapg.properties.connection_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["information"]) -> typing.Union[MetaOapg.properties.information, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "integration_name", "integration_type", "max_files", "allow_model_change", "integration_display_name", "tags", "integration_logo_url", "connection_settings", "information", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        integration_name: typing.Union[MetaOapg.properties.integration_name, str, ],
        max_files: typing.Union[MetaOapg.properties.max_files, decimal.Decimal, int, ],
        allow_model_change: typing.Union[MetaOapg.properties.allow_model_change, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        integration_display_name: typing.Union[MetaOapg.properties.integration_display_name, str, ],
        integration_type: 'IntegrationType',
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, None, schemas.Unset] = schemas.unset,
        integration_logo_url: typing.Union[MetaOapg.properties.integration_logo_url, None, str, schemas.Unset] = schemas.unset,
        connection_settings: typing.Union[MetaOapg.properties.connection_settings, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        information: typing.Union[MetaOapg.properties.information, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IntegrationDescriptionEntity':
        return super().__new__(
            cls,
            *args,
            integration_name=integration_name,
            max_files=max_files,
            allow_model_change=allow_model_change,
            description=description,
            id=id,
            integration_display_name=integration_display_name,
            integration_type=integration_type,
            tags=tags,
            integration_logo_url=integration_logo_url,
            connection_settings=connection_settings,
            information=information,
            _configuration=_configuration,
            **kwargs,
        )

from quivr_python_sdk.model.integration_brain_tag import IntegrationBrainTag
from quivr_python_sdk.model.integration_type import IntegrationType
