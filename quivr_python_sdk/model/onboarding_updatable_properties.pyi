# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class OnboardingUpdatableProperties(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Properties that can be received on onboarding update
    """


    class MetaOapg:
        
        class properties:
            
            
            class onboarding_a(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onboarding_a':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class onboarding_b1(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onboarding_b1':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class onboarding_b2(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onboarding_b2':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class onboarding_b3(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onboarding_b3':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "onboarding_a": onboarding_a,
                "onboarding_b1": onboarding_b1,
                "onboarding_b2": onboarding_b2,
                "onboarding_b3": onboarding_b3,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_a"]) -> MetaOapg.properties.onboarding_a: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_b1"]) -> MetaOapg.properties.onboarding_b1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_b2"]) -> MetaOapg.properties.onboarding_b2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarding_b3"]) -> MetaOapg.properties.onboarding_b3: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["onboarding_a", "onboarding_b1", "onboarding_b2", "onboarding_b3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_a"]) -> typing.Union[MetaOapg.properties.onboarding_a, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_b1"]) -> typing.Union[MetaOapg.properties.onboarding_b1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_b2"]) -> typing.Union[MetaOapg.properties.onboarding_b2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarding_b3"]) -> typing.Union[MetaOapg.properties.onboarding_b3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["onboarding_a", "onboarding_b1", "onboarding_b2", "onboarding_b3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        onboarding_a: typing.Union[MetaOapg.properties.onboarding_a, None, bool, schemas.Unset] = schemas.unset,
        onboarding_b1: typing.Union[MetaOapg.properties.onboarding_b1, None, bool, schemas.Unset] = schemas.unset,
        onboarding_b2: typing.Union[MetaOapg.properties.onboarding_b2, None, bool, schemas.Unset] = schemas.unset,
        onboarding_b3: typing.Union[MetaOapg.properties.onboarding_b3, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnboardingUpdatableProperties':
        return super().__new__(
            cls,
            *args,
            onboarding_a=onboarding_a,
            onboarding_b1=onboarding_b1,
            onboarding_b2=onboarding_b2,
            onboarding_b3=onboarding_b3,
            _configuration=_configuration,
            **kwargs,
        )
