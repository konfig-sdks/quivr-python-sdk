# coding: utf-8

"""
    FastAPI

    Open-source RAG Framework

    The version of the OpenAPI document: 0.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from quivr_python_sdk import schemas  # noqa: F401


class PublicBrain(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "last_update",
            "name",
            "id",
            "brain_type",
        }
        
        class properties:
            id = schemas.UUIDSchema
            name = schemas.StrSchema
            last_update = schemas.StrSchema
        
            @staticmethod
            def brain_type() -> typing.Type['BrainType']:
                return BrainType
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            number_of_subscribers = schemas.IntSchema
        
            @staticmethod
            def brain_definition() -> typing.Type['ApiBrainDefinitionEntityOutputNullable']:
                return ApiBrainDefinitionEntityOutputNullable
            __annotations__ = {
                "id": id,
                "name": name,
                "last_update": last_update,
                "brain_type": brain_type,
                "description": description,
                "number_of_subscribers": number_of_subscribers,
                "brain_definition": brain_definition,
            }
    
    last_update: MetaOapg.properties.last_update
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    brain_type: 'BrainType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_update"]) -> MetaOapg.properties.last_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_type"]) -> 'BrainType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_subscribers"]) -> MetaOapg.properties.number_of_subscribers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brain_definition"]) -> 'ApiBrainDefinitionEntityOutputNullable': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "last_update", "brain_type", "description", "number_of_subscribers", "brain_definition", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_update"]) -> MetaOapg.properties.last_update: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_type"]) -> 'BrainType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_subscribers"]) -> typing.Union[MetaOapg.properties.number_of_subscribers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brain_definition"]) -> typing.Union['ApiBrainDefinitionEntityOutputNullable', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "last_update", "brain_type", "description", "number_of_subscribers", "brain_definition", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        last_update: typing.Union[MetaOapg.properties.last_update, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        brain_type: 'BrainType',
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        number_of_subscribers: typing.Union[MetaOapg.properties.number_of_subscribers, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        brain_definition: typing.Union['ApiBrainDefinitionEntityOutputNullable', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PublicBrain':
        return super().__new__(
            cls,
            *args,
            last_update=last_update,
            name=name,
            id=id,
            brain_type=brain_type,
            description=description,
            number_of_subscribers=number_of_subscribers,
            brain_definition=brain_definition,
            _configuration=_configuration,
            **kwargs,
        )

from quivr_python_sdk.model.api_brain_definition_entity_output_nullable import ApiBrainDefinitionEntityOutputNullable
from quivr_python_sdk.model.brain_type import BrainType
